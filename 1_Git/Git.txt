/*******
 * Git *
 *******/
 //
 // SnapShots
 //
 _ Git takes a picture of what all your files look like and stores a reference to that snapshot.
 _ Git thinks about its data more like a stream of snapshots.
// 
// SHA-1
//
_ Everything in Git is checksummed before it is stored and is then referred to by that checksum.
_ The mechanism that Git uses for this checksumming is called a SHA-1 hash.
//
// The three States
//
_Three main states: modified, staged, and committed.
 |_ Modified means that you have changed the file but have not committed it to your database yet.
 |_ Statged means that you have marked a modified file in its current version to go into your next commit snapshot.
 |_ Committed means that the data is safely stored in your local database.
_ This lead to the three main sections of a Git project: the working tree, the staging area, and the Git directory.
 |_ The working tree is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.
 |_ The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the "index", but the phrase "staging area" works just at well.
 |_ The Git directory is where Git stores the metadata and object database of your project. This is the most important part of Git, and it is what is copied when you clone a respository from another computer.
 //
 // Workflow
 //
 1. Modified files in your working tree.
 2. Selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.
 3. Do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.

 /****************************************************************************
  * Summary 
  ****************************************************************************/
  1. Git

